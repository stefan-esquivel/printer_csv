#!/usr/bin/python3# ----------------# Printer_lsit.py# Last Modified: 4/17/20# Coder: Stefan Esquivel# Oddities: None# ----------------import csv# holds the printer objects in a listclass Printer_list:    # initializing call when creating the object for the first time    def __init__(self, p_list=[]):        self.p_list = p_list    # allows iteration tools    def __iter__(self):        return iter(self.p_list)    # returns the length of the list    def __len__(self):        return len(self.p_list)    # method copies printer list to csv    def copy_to_csv(self, br, ip, lab, mc, mod, na, ser, ricoh):        print("Building csv...")        field_names = []        # checks with flags have been activated in result of running the Test Driver. Also created header row for csv        if (isinstance(br, list)):            field_names.append("branch")        if ip is True:            field_names.append("ip")        if lab is True:            field_names.append("lable")        if mc is True:            field_names.append("mac")        if mod is True:            field_names.append("model")        if na is True:            field_names.append("name")        if ser is True:            field_names.append("serial")        # opens printer csv file to write to        # stored the csv int the root of the folder        with open("printers.csv", mode="w") as csv_file:            writer = csv.writer(csv_file)            writer.writerow(field_names)            # iterates through all the printer list objects            for i in range(len(self.p_list)):                # checks if the ricoh argument was called                if ricoh is True:                    # only includes ricoh named printers to the csv                    if(self.p_list[i].get_name() == "RICOH"):                        row = []                        # outputs printer information stored in the printer object                        if(isinstance(br, list)):                            row.append(self.p_list[i].get_branch())                        if(ip is True):                            row.append(self.p_list[i].get_ip())                        if(lab is True):                            row.append(self.p_list[i].get_label())                        if(mc is True):                            row.append(self.p_list[i].get_mac())                        if(mod is True):                            row.append(self.p_list[i].get_model())                        if(na is True):                            row.append(self.p_list[i].get_name())                        if(ser is True):                            row.append(self.p_list[i].get_serial())                        writer.writerow(row)                else:                    # Includes all printers to the csv                    row = []                    # outputs printer information stored in the printer object                    if(isinstance(br, list)):                        row.append(self.p_list[i].get_branch())                    if(ip is True):                        row.append(self.p_list[i].get_ip())                    if(lab is True):                        row.append(self.p_list[i].get_label())                    if(mc is True):                        row.append(self.p_list[i].get_mac())                    if(mod is True):                        row.append(self.p_list[i].get_model())                    if(na is True):                        row.append(self.p_list[i].get_name())                    if(ser is True):                        row.append(self.p_list[i].get_serial())                    writer.writerow(row)        csv_file.close()        print("done")    # prints list to std out in the same way as the above function    def print_list(self, br, ip, lab, mc, mod, na, ser, ricoh):        print("Printing to stdout...")        field_names = []        if not br and ip is not True and lab is not True and mc is not True and mod is not True and na is not True and ser is not True:            field_names = ["branch", "ip", "lable", "mac", "model", "name", "serial"]        else:            if (isinstance(br, list)):                field_names.append("branch")            if ip is True:                field_names.append("ip")            if lab is True:                field_names.append("lable")            if mc is True:                field_names.append("mac")            if mod is True:                field_names.append("model")            if na is True:                field_names.append("name")            if ser is True:                field_names.append("serial")        print(field_names)        for i in range(len(self.p_list)):            if ricoh is True:                if(self.p_list[i].get_name() == "RICOH"):                    row = []                    if(isinstance(br, list)):                        row.append(self.p_list[i].get_branch())                    if(ip is True):                        row.append(self.p_list[i].get_ip())                    if(lab is True):                        row.append(self.p_list[i].get_label())                    if(mc is True):                        row.append(self.p_list[i].get_mac())                    if(mod is True):                        row.append(self.p_list[i].get_model())                    if(na is True):                        row.append(self.p_list[i].get_name())                    if(ser is True):                        row.append(self.p_list[i].get_serial())                    print(row)            else:                row = []                if(isinstance(br, list)):                    row.append(self.p_list[i].get_branch())                if(ip is True):                    row.append(self.p_list[i].get_ip())                if(lab is True):                    row.append(self.p_list[i].get_label())                if(mc is True):                    row.append(self.p_list[i].get_mac())                if(mod is True):                    row.append(self.p_list[i].get_model())                if(na is True):                    row.append(self.p_list[i].get_name())                if(ser is True):                    row.append(self.p_list[i].get_serial())                print(row)        print("done")    # function simply adds new printer the printer list    def add_printer(self, printer):        self.p_list.append(printer)